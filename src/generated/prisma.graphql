# source: http://192.168.99.100:4466
# timestamp: Tue Sep 10 2019 17:26:57 GMT+0200 (GMT+02:00)

type AggregateAstronaut {
  count: Int!
}

type Astronaut implements Node {
  id: ID!
  name: String!
  surname: String!
  superPower: String!
  birthDate: Int!
}

"""A connection to a list of items."""
type AstronautConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AstronautEdge]!
  aggregate: AggregateAstronaut!
}

input AstronautCreateInput {
  id: ID
  name: String!
  surname: String!
  superPower: String!
  birthDate: Int!
}

"""An edge in a connection."""
type AstronautEdge {
  """The item at the end of the edge."""
  node: Astronaut!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AstronautOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  surname_ASC
  surname_DESC
  superPower_ASC
  superPower_DESC
  birthDate_ASC
  birthDate_DESC
}

type AstronautPreviousValues {
  id: ID!
  name: String!
  surname: String!
  superPower: String!
  birthDate: Int!
}

type AstronautSubscriptionPayload {
  mutation: MutationType!
  node: Astronaut
  updatedFields: [String!]
  previousValues: AstronautPreviousValues
}

input AstronautSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AstronautSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AstronautSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AstronautSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AstronautWhereInput
}

input AstronautUpdateInput {
  name: String
  surname: String
  superPower: String
  birthDate: Int
}

input AstronautUpdateManyMutationInput {
  name: String
  surname: String
  superPower: String
  birthDate: Int
}

input AstronautWhereInput {
  """Logical AND on all given filters."""
  AND: [AstronautWhereInput!]

  """Logical OR on all given filters."""
  OR: [AstronautWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AstronautWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  surname: String

  """All values that are not equal to given value."""
  surname_not: String

  """All values that are contained in given list."""
  surname_in: [String!]

  """All values that are not contained in given list."""
  surname_not_in: [String!]

  """All values less than the given value."""
  surname_lt: String

  """All values less than or equal the given value."""
  surname_lte: String

  """All values greater than the given value."""
  surname_gt: String

  """All values greater than or equal the given value."""
  surname_gte: String

  """All values containing the given string."""
  surname_contains: String

  """All values not containing the given string."""
  surname_not_contains: String

  """All values starting with the given string."""
  surname_starts_with: String

  """All values not starting with the given string."""
  surname_not_starts_with: String

  """All values ending with the given string."""
  surname_ends_with: String

  """All values not ending with the given string."""
  surname_not_ends_with: String
  superPower: String

  """All values that are not equal to given value."""
  superPower_not: String

  """All values that are contained in given list."""
  superPower_in: [String!]

  """All values that are not contained in given list."""
  superPower_not_in: [String!]

  """All values less than the given value."""
  superPower_lt: String

  """All values less than or equal the given value."""
  superPower_lte: String

  """All values greater than the given value."""
  superPower_gt: String

  """All values greater than or equal the given value."""
  superPower_gte: String

  """All values containing the given string."""
  superPower_contains: String

  """All values not containing the given string."""
  superPower_not_contains: String

  """All values starting with the given string."""
  superPower_starts_with: String

  """All values not starting with the given string."""
  superPower_not_starts_with: String

  """All values ending with the given string."""
  superPower_ends_with: String

  """All values not ending with the given string."""
  superPower_not_ends_with: String
  birthDate: Int

  """All values that are not equal to given value."""
  birthDate_not: Int

  """All values that are contained in given list."""
  birthDate_in: [Int!]

  """All values that are not contained in given list."""
  birthDate_not_in: [Int!]

  """All values less than the given value."""
  birthDate_lt: Int

  """All values less than or equal the given value."""
  birthDate_lte: Int

  """All values greater than the given value."""
  birthDate_gt: Int

  """All values greater than or equal the given value."""
  birthDate_gte: Int
}

input AstronautWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createAstronaut(data: AstronautCreateInput!): Astronaut!
  updateAstronaut(data: AstronautUpdateInput!, where: AstronautWhereUniqueInput!): Astronaut
  deleteAstronaut(where: AstronautWhereUniqueInput!): Astronaut
  upsertAstronaut(where: AstronautWhereUniqueInput!, create: AstronautCreateInput!, update: AstronautUpdateInput!): Astronaut!
  updateManyAstronauts(data: AstronautUpdateManyMutationInput!, where: AstronautWhereInput): BatchPayload!
  deleteManyAstronauts(where: AstronautWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  astronauts(where: AstronautWhereInput, orderBy: AstronautOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Astronaut]!
  astronaut(where: AstronautWhereUniqueInput!): Astronaut
  astronautsConnection(where: AstronautWhereInput, orderBy: AstronautOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AstronautConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  astronaut(where: AstronautSubscriptionWhereInput): AstronautSubscriptionPayload
}
